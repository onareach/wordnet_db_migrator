{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WordNet Porter","text":"<p>A utility to migrate WordNet SQLite database to PostgreSQL.</p>"},{"location":"#overview","title":"Overview","text":"<p>WordNet Porter is a tool designed to help you migrate a WordNet database from SQLite to PostgreSQL. It handles the entire migration process, including:</p> <ul> <li>Extracting the schema from the SQLite database</li> <li>Creating tables in PostgreSQL</li> <li>Migrating data</li> <li>Setting up indexes and foreign keys</li> <li>Validating the migration</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Step-by-Step Migration: The migration process is divided into logical steps that can be run individually or as a complete sequence.</li> <li>Configurable: Easily configure database connections and migration options.</li> <li>Validation: Built-in validation to ensure data integrity after migration.</li> <li>Detailed Logging: Comprehensive logging of the migration process.</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code># Install the package\npip install wordnet-porter\n\n# Run the migration\nwordnet-porter --sqlite-path /path/to/wordnet.db\n</code></pre> <p>For more detailed instructions, see the Installation and Usage guides.</p>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Installation Guide: How to install WordNet Porter</li> <li>Usage Guide: How to use WordNet Porter</li> <li>Development Guide: How to contribute to WordNet Porter</li> <li>API Reference: Detailed API documentation</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"api_reference/","title":"API Reference","text":"<p>This document provides a reference for the WordNet Porter API.</p>"},{"location":"api_reference/#main-modules","title":"Main Modules","text":""},{"location":"api_reference/#wordnet_porterconfig","title":"wordnet_porter.config","text":"<p>The configuration module handles loading and managing configuration settings.</p>"},{"location":"api_reference/#classes","title":"Classes","text":""},{"location":"api_reference/#config","title":"<code>Config</code>","text":"<p>The main configuration class for WordNet Porter.</p>"},{"location":"api_reference/#methods","title":"Methods","text":"<ul> <li><code>__init__()</code>: Initialize configuration with default values and load from files.</li> <li><code>_load_config()</code>: Load configuration from files.</li> <li><code>_update_nested_dict(d, u)</code>: Update a nested dictionary with values from another dictionary.</li> <li><code>_setup_paths()</code>: Set up paths based on configuration.</li> <li><code>_setup_file_logging()</code>: Set up file logging for the application.</li> <li><code>setup_console_logging()</code>: Set up console logging if show_console_logs is True.</li> <li><code>save_config()</code>: Save current configuration to user config file.</li> <li><code>prompt_credentials()</code>: Prompt for PostgreSQL credentials.</li> <li><code>ensure_pg_credentials()</code>: Ensure PostgreSQL credentials are available, prompting if necessary.</li> </ul>"},{"location":"api_reference/#properties","title":"Properties","text":"<ul> <li><code>SQLITE_PATH</code>: Get/set SQLite database path.</li> <li><code>PG_HOST</code>: Get/set PostgreSQL host.</li> <li><code>PG_PORT</code>: Get/set PostgreSQL port.</li> <li><code>PG_DATABASE</code>: Get/set PostgreSQL database name.</li> <li><code>pg_user</code>: Get/set PostgreSQL username.</li> <li><code>pg_password</code>: Get/set PostgreSQL password.</li> <li><code>SHOW_DB_NAME</code>: Get/set show database name setting.</li> <li><code>SHOW_LOGGING</code>: Get/set show logging setting.</li> <li><code>MAX_LOGIN_ATTEMPTS</code>: Get/set maximum login attempts.</li> <li><code>BATCH_SIZE</code>: Get/set batch size.</li> <li><code>force_mode</code>: Get/set force mode setting.</li> </ul>"},{"location":"api_reference/#wordnet_portercli","title":"wordnet_porter.cli","text":"<p>The command-line interface module handles command-line argument parsing and validation.</p>"},{"location":"api_reference/#functions","title":"Functions","text":"<ul> <li><code>show_help()</code>: Display help information and exit.</li> <li><code>validate_cli_args()</code>: Validate command-line arguments.</li> <li><code>parse_cli_args(all_steps)</code>: Parse command-line arguments and determine which steps to run.</li> </ul>"},{"location":"api_reference/#wordnet_portermain","title":"wordnet_porter.main","text":"<p>The main module coordinates the step-by-step process of migrating a WordNet SQLite database to PostgreSQL.</p>"},{"location":"api_reference/#functions_1","title":"Functions","text":"<ul> <li><code>main()</code>: Main function to coordinate the WordNet migration process.</li> </ul>"},{"location":"api_reference/#wordnet_porterbootstrap","title":"wordnet_porter.bootstrap","text":"<p>The bootstrap module handles setting up the environment for the WordNet Porter application.</p>"},{"location":"api_reference/#functions_2","title":"Functions","text":"<ul> <li><code>setup()</code>: Set up the environment for the WordNet Porter application.</li> <li><code>print_header(message)</code>: Print a header message.</li> </ul>"},{"location":"api_reference/#step-modules","title":"Step Modules","text":"<p>Each step in the migration process is implemented as a separate module in the <code>steps</code> directory.</p>"},{"location":"api_reference/#wordnet_porterstepsstep010_test_sqlite_connection","title":"wordnet_porter.steps.step010_test_sqlite_connection","text":"<p>Tests the connection to the SQLite database.</p>"},{"location":"api_reference/#functions_3","title":"Functions","text":"<ul> <li><code>run()</code>: Run the step to test the SQLite database connection.</li> </ul>"},{"location":"api_reference/#wordnet_porterstepsstep020_postgres_credentials","title":"wordnet_porter.steps.step020_postgres_credentials","text":"<p>Sets up PostgreSQL credentials.</p>"},{"location":"api_reference/#functions_4","title":"Functions","text":"<ul> <li><code>run()</code>: Run the step to set up PostgreSQL credentials.</li> <li><code>get_credentials()</code>: Get PostgreSQL credentials from the user.</li> </ul>"},{"location":"api_reference/#wordnet_porterstepsstep030_create_postgres_database","title":"wordnet_porter.steps.step030_create_postgres_database","text":"<p>Creates the WordNet database in PostgreSQL.</p>"},{"location":"api_reference/#functions_5","title":"Functions","text":"<ul> <li><code>run()</code>: Run the step to create the PostgreSQL database.</li> </ul>"},{"location":"api_reference/#wordnet_porterstepsstep035_purge_directories","title":"wordnet_porter.steps.step035_purge_directories","text":"<p>Purges output directories if needed.</p>"},{"location":"api_reference/#functions_6","title":"Functions","text":"<ul> <li><code>run()</code>: Run the step to purge directories.</li> </ul>"},{"location":"api_reference/#wordnet_porterstepsstep040_extract_sqlite_schema","title":"wordnet_porter.steps.step040_extract_sqlite_schema","text":"<p>Extracts the schema from the SQLite database.</p>"},{"location":"api_reference/#functions_7","title":"Functions","text":"<ul> <li><code>run()</code>: Run the step to extract the SQLite schema.</li> </ul>"},{"location":"api_reference/#wordnet_porterstepsstep045_analyze_dependencies","title":"wordnet_porter.steps.step045_analyze_dependencies","text":"<p>Analyzes table dependencies.</p>"},{"location":"api_reference/#functions_8","title":"Functions","text":"<ul> <li><code>run()</code>: Run the step to analyze dependencies.</li> </ul>"},{"location":"api_reference/#wordnet_porterstepsstep050_extract_sqlite_metadata","title":"wordnet_porter.steps.step050_extract_sqlite_metadata","text":"<p>Extracts metadata from the SQLite database.</p>"},{"location":"api_reference/#functions_9","title":"Functions","text":"<ul> <li><code>run()</code>: Run the step to extract SQLite metadata.</li> </ul>"},{"location":"api_reference/#wordnet_porterstepsstep060_generate_tables","title":"wordnet_porter.steps.step060_generate_tables","text":"<p>Generates table creation scripts.</p>"},{"location":"api_reference/#functions_10","title":"Functions","text":"<ul> <li><code>run()</code>: Run the step to generate table scripts.</li> </ul>"},{"location":"api_reference/#wordnet_porterstepsstep065_generate_foreign_keys","title":"wordnet_porter.steps.step065_generate_foreign_keys","text":"<p>Generates foreign key creation scripts.</p>"},{"location":"api_reference/#functions_11","title":"Functions","text":"<ul> <li><code>run()</code>: Run the step to generate foreign key scripts.</li> </ul>"},{"location":"api_reference/#wordnet_porterstepsstep067_generate_foreign_key_validators","title":"wordnet_porter.steps.step067_generate_foreign_key_validators","text":"<p>Generates foreign key validator scripts.</p>"},{"location":"api_reference/#functions_12","title":"Functions","text":"<ul> <li><code>run()</code>: Run the step to generate foreign key validators.</li> </ul>"},{"location":"api_reference/#wordnet_porterstepsstep068_generate_indexes","title":"wordnet_porter.steps.step068_generate_indexes","text":"<p>Generates index creation scripts.</p>"},{"location":"api_reference/#functions_13","title":"Functions","text":"<ul> <li><code>run()</code>: Run the step to generate index scripts.</li> </ul>"},{"location":"api_reference/#wordnet_porterstepsstep070_run_table_scripts","title":"wordnet_porter.steps.step070_run_table_scripts","text":"<p>Runs table creation scripts.</p>"},{"location":"api_reference/#functions_14","title":"Functions","text":"<ul> <li><code>run()</code>: Run the step to execute table creation scripts.</li> </ul>"},{"location":"api_reference/#wordnet_porterstepsstep080_run_index_scripts","title":"wordnet_porter.steps.step080_run_index_scripts","text":"<p>Runs index creation scripts.</p>"},{"location":"api_reference/#functions_15","title":"Functions","text":"<ul> <li><code>run()</code>: Run the step to execute index creation scripts.</li> </ul>"},{"location":"api_reference/#wordnet_porterstepsstep090_insert_data_tables","title":"wordnet_porter.steps.step090_insert_data_tables","text":"<p>Inserts data into tables.</p>"},{"location":"api_reference/#functions_16","title":"Functions","text":"<ul> <li><code>run()</code>: Run the step to insert data into tables.</li> <li><code>list_tables()</code>: List all tables that can be inserted.</li> </ul>"},{"location":"api_reference/#wordnet_porterstepsstep095_validate_foreign_key_data","title":"wordnet_porter.steps.step095_validate_foreign_key_data","text":"<p>Validates foreign key data.</p>"},{"location":"api_reference/#functions_17","title":"Functions","text":"<ul> <li><code>run()</code>: Run the step to validate foreign key data.</li> </ul>"},{"location":"api_reference/#wordnet_porterstepsstep100_apply_foreign_keys","title":"wordnet_porter.steps.step100_apply_foreign_keys","text":"<p>Applies foreign keys.</p>"},{"location":"api_reference/#functions_18","title":"Functions","text":"<ul> <li><code>run()</code>: Run the step to apply foreign keys.</li> </ul>"},{"location":"api_reference/#utility-modules","title":"Utility Modules","text":""},{"location":"api_reference/#wordnet_porterutilsdb_utils","title":"wordnet_porter.utils.db_utils","text":"<p>Utility functions for database operations.</p>"},{"location":"api_reference/#functions_19","title":"Functions","text":"<ul> <li><code>connect_to_sqlite(db_path)</code>: Connect to a SQLite database.</li> <li><code>connect_to_postgres(host, port, database, user, password)</code>: Connect to a PostgreSQL database.</li> <li><code>execute_query(connection, query, params=None)</code>: Execute a query on a database connection.</li> <li><code>fetch_all(connection, query, params=None)</code>: Fetch all results from a query.</li> <li><code>fetch_one(connection, query, params=None)</code>: Fetch one result from a query.</li> <li><code>close_connection(connection)</code>: Close a database connection.</li> </ul>"},{"location":"development/","title":"Development Guide","text":"<p>This guide provides information for developers who want to contribute to WordNet Porter or modify it for their own needs.</p>"},{"location":"development/#project-structure","title":"Project Structure","text":"<p>The WordNet Porter project is organized as follows:</p> <pre><code>wordnet-porter/\n\u251c\u2500\u2500 .github/                    # GitHub-specific files\n\u2502   \u251c\u2500\u2500 workflows/              # GitHub Actions workflows\n\u2502   \u2502   \u2514\u2500\u2500 ci.yml              # CI/CD configuration\n\u2502   \u2514\u2500\u2500 ISSUE_TEMPLATE/         # Issue templates\n\u251c\u2500\u2500 docs/                       # Documentation\n\u2502   \u251c\u2500\u2500 installation.md         # Installation guide\n\u2502   \u251c\u2500\u2500 usage.md                # Usage guide\n\u2502   \u2514\u2500\u2500 development.md          # Development guide (this file)\n\u251c\u2500\u2500 examples/                   # Example usage\n\u251c\u2500\u2500 tests/                      # Test cases\n\u251c\u2500\u2500 wordnet_porter/             # Main package\n\u2502   \u251c\u2500\u2500 __init__.py             # Package initialization\n\u2502   \u251c\u2500\u2500 cli.py                  # Command-line interface\n\u2502   \u251c\u2500\u2500 config.py               # Configuration handling\n\u2502   \u251c\u2500\u2500 main.py                 # Main entry point\n\u2502   \u251c\u2500\u2500 steps/                  # Individual steps\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 step010_test_sqlite_connection.py\n\u2502   \u2502   \u251c\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 utils/                  # Utility functions\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 db_utils.py\n\u251c\u2500\u2500 .gitignore                  # Git ignore file\n\u251c\u2500\u2500 LICENSE                     # License file\n\u251c\u2500\u2500 pyproject.toml              # Modern Python packaging\n\u251c\u2500\u2500 README.md                   # Main README\n\u251c\u2500\u2500 CONTRIBUTING.md             # Contribution guidelines\n\u2514\u2500\u2500 setup.py                    # Setup script\n</code></pre>"},{"location":"development/#development-setup","title":"Development Setup","text":"<p>To set up your development environment:</p> <ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/onareach/wordnet-porter.git\ncd wordnet-porter\n</code></pre></p> </li> <li> <p>Create a virtual environment:    <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install development dependencies:    <pre><code>pip install -e \".[dev]\"\n</code></pre></p> </li> </ol>"},{"location":"development/#adding-a-new-step","title":"Adding a New Step","text":"<p>The migration process is divided into steps, each implemented as a separate module in the <code>steps</code> directory. To add a new step:</p> <ol> <li> <p>Create a new module in the <code>steps</code> directory with a name following the pattern <code>stepXXX_description.py</code>, where <code>XXX</code> is a three-digit number indicating the order of the step.</p> </li> <li> <p>Implement the step as a function named <code>run</code> that returns a boolean indicating success or failure:</p> </li> </ol> <pre><code># wordnet_porter/steps/stepXXX_description.py\n\"\"\"\nStep XXX: Description of the step.\n\nThis module implements step XXX of the WordNet migration process.\n\"\"\"\nimport logging\nfrom wordnet_porter.config import config\n\n# Set up logging\nlogger = logging.getLogger(__name__)\n\ndef run() -&gt; bool:\n    \"\"\"\n    Run step XXX of the WordNet migration process.\n\n    Returns:\n        bool: True if the step was successful, False otherwise.\n    \"\"\"\n    logger.info(\"Starting step XXX\")\n\n    try:\n        # Implement the step here\n\n        logger.info(\"Step XXX completed successfully\")\n        return True\n    except Exception as e:\n        logger.error(f\"Step XXX failed: {e}\")\n        config.success = False\n        return False\n</code></pre> <ol> <li>Add the step to the <code>ALL_STEPS</code> list in <code>main.py</code>:</li> </ol> <pre><code>ALL_STEPS: List[StepDefinition] = [\n    # ...\n    (\"Step XXX: Description\", stepXXX_description.run),\n    # ...\n]\n</code></pre>"},{"location":"development/#modifying-an-existing-step","title":"Modifying an Existing Step","text":"<p>To modify an existing step:</p> <ol> <li>Locate the step module in the <code>steps</code> directory.</li> <li>Make your changes to the <code>run</code> function.</li> <li>Test your changes (see the Testing section below).</li> </ol>"},{"location":"development/#adding-a-new-command-line-option","title":"Adding a New Command-Line Option","text":"<p>To add a new command-line option:</p> <ol> <li>Add the option to the <code>VALID_FLAGS</code> set in <code>cli.py</code>:</li> </ol> <pre><code>VALID_FLAGS: Set[str] = {\n    # ...\n    \"--new-option\",\n    # ...\n}\n</code></pre> <ol> <li> <p>Add the option to the help text in the <code>show_help</code> function in <code>cli.py</code>.</p> </li> <li> <p>Add code to handle the option in the <code>validate_cli_args</code> function in <code>cli.py</code>.</p> </li> </ol>"},{"location":"development/#testing","title":"Testing","text":""},{"location":"development/#running-tests","title":"Running Tests","text":"<p>Run tests with pytest:</p> <pre><code>pytest\n</code></pre>"},{"location":"development/#writing-tests","title":"Writing Tests","text":"<p>Tests are located in the <code>tests</code> directory. To add a new test:</p> <ol> <li> <p>Create a new module in the <code>tests</code> directory with a name following the pattern <code>test_*.py</code>.</p> </li> <li> <p>Implement test functions using pytest:</p> </li> </ol> <pre><code># tests/test_example.py\n\"\"\"\nTests for the example module.\n\"\"\"\nimport pytest\nfrom wordnet_porter import example\n\ndef test_example_function():\n    \"\"\"Test the example function.\"\"\"\n    result = example.function()\n    assert result == expected_result\n</code></pre>"},{"location":"development/#code-style","title":"Code Style","text":"<p>This project follows PEP 8 style guidelines. We use:</p> <ul> <li>Black for code formatting</li> <li>isort for import sorting</li> <li>flake8 for linting</li> <li>mypy for type checking</li> </ul> <p>You can run these tools with:</p> <pre><code>black .\nisort .\nflake8\nmypy wordnet_porter\n</code></pre>"},{"location":"development/#documentation","title":"Documentation","text":""},{"location":"development/#docstrings","title":"Docstrings","text":"<p>All modules, classes, and functions should have docstrings following the Google style:</p> <pre><code>def function(arg1: str, arg2: int) -&gt; bool:\n    \"\"\"\n    Short description of the function.\n\n    Longer description of the function if needed.\n\n    Args:\n        arg1: Description of arg1\n        arg2: Description of arg2\n\n    Returns:\n        Description of the return value\n\n    Raises:\n        ValueError: Description of when this error is raised\n    \"\"\"\n    # Function implementation\n</code></pre>"},{"location":"development/#markdown-documentation","title":"Markdown Documentation","text":"<p>Documentation files are written in Markdown and located in the <code>docs</code> directory. To add a new documentation file:</p> <ol> <li>Create a new Markdown file in the <code>docs</code> directory.</li> <li>Add a link to the new file in the appropriate place (e.g., in the README.md or another documentation file).</li> </ol>"},{"location":"development/#releasing-a-new-version","title":"Releasing a New Version","text":"<p>To release a new version:</p> <ol> <li>Update the version number in <code>wordnet_porter/__init__.py</code>:</li> </ol> <pre><code>__version__ = \"X.Y.Z\"\n</code></pre> <ol> <li> <p>Update the CHANGELOG.md file with the changes in the new version.</p> </li> <li> <p>Commit the changes:</p> </li> </ol> <pre><code>git add wordnet_porter/__init__.py CHANGELOG.md\ngit commit -m \"Bump version to X.Y.Z\"\n</code></pre> <ol> <li>Tag the release:</li> </ol> <pre><code>git tag -a vX.Y.Z -m \"Version X.Y.Z\"\ngit push origin vX.Y.Z\n</code></pre> <ol> <li>Build the package:</li> </ol> <pre><code>python -m build\n</code></pre> <ol> <li>Upload to PyPI:</li> </ol> <pre><code>twine upload dist/*\n</code></pre>"},{"location":"development/#getting-help","title":"Getting Help","text":"<p>If you need help with development, please:</p> <ol> <li>Check the documentation in the <code>docs</code> directory</li> <li>Look at the code and comments</li> <li>Check the GitHub Issues</li> <li>Create a new issue if your question is not answered elsewhere</li> </ol>"},{"location":"installation/","title":"Installation Guide","text":"<p>This guide provides detailed instructions for installing WordNet Porter.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.6 or higher</li> <li>PostgreSQL server (installed and running)</li> <li>SQLite WordNet database</li> <li>Virtual Environment: This application is designed to run in a Python virtual environment</li> <li>psycopg2-binary: The application specifically requires the <code>psycopg2-binary</code> package, not the standard <code>psycopg2</code> package</li> </ul>"},{"location":"installation/#virtual-environment-setup-important","title":"Virtual Environment Setup (Important)","text":"<p>WordNet Porter is designed to run in a Python virtual environment. This isolates the application's dependencies from your system Python installation and prevents conflicts with other packages.</p>"},{"location":"installation/#creating-a-virtual-environment","title":"Creating a Virtual Environment","text":"<pre><code># Create a virtual environment\npython -m venv wordnet_porter_venv\n\n# Activate the virtual environment\n# On Windows:\nwordnet_porter_venv\\Scripts\\activate\n# On macOS/Linux:\nsource wordnet_porter_venv/bin/activate\n</code></pre> <p>You should see the virtual environment name in your command prompt, indicating it's active. All subsequent installation commands should be run with the virtual environment activated.</p>"},{"location":"installation/#installation-methods","title":"Installation Methods","text":""},{"location":"installation/#method-1-using-pip-recommended","title":"Method 1: Using pip (Recommended)","text":"<p>The easiest way to install WordNet Porter is using pip within your activated virtual environment:</p> <pre><code># Make sure your virtual environment is activated\npip install wordnet-porter\n</code></pre> <p>This will install the latest stable version from PyPI, including all required dependencies.</p>"},{"location":"installation/#method-2-from-source","title":"Method 2: From Source","text":"<p>To install the latest development version from source:</p> <pre><code># Clone the repository\ngit clone https://github.com/onareach/wordnet-porter.git\ncd wordnet-porter\n\n# Create and activate a virtual environment (if not already done)\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install in development mode\npip install -e .\n</code></pre>"},{"location":"installation/#method-3-using-the-installation-script","title":"Method 3: Using the Installation Script","text":"<p>If you've downloaded the source code, you can use the included installation script:</p> <pre><code>chmod +x install.sh\n./install.sh\n</code></pre> <p>This script will: 1. Check Python version 2. Create a virtual environment 3. Install dependencies 4. Install WordNet Porter in development mode</p>"},{"location":"installation/#important-note-about-dependencies","title":"Important Note About Dependencies","text":"<p>This project specifically requires <code>psycopg2-binary</code> and not the standard <code>psycopg2</code> package. Using the standard <code>psycopg2</code> package may cause errors. The correct dependency will be installed automatically when you install the package, but if you're installing dependencies manually, make sure to use:</p> <pre><code>pip install psycopg2-binary\n</code></pre>"},{"location":"installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify that WordNet Porter is installed correctly:</p> <pre><code># Make sure your virtual environment is activated\nwordnet-porter --help\n</code></pre> <p>This should display the help message with available options.</p>"},{"location":"installation/#troubleshooting-installation","title":"Troubleshooting Installation","text":"<p>If you encounter issues during installation:</p> <ol> <li>Ensure your virtual environment is activated</li> <li>Check that your command prompt shows the virtual environment name</li> <li> <p>If not, activate it using the commands in the \"Creating a Virtual Environment\" section</p> </li> <li> <p>Verify psycopg2-binary is installed correctly <pre><code>pip list | grep psycopg2\n</code></pre></p> </li> <li> <p>You should see <code>psycopg2-binary</code> in the list, not just <code>psycopg2</code></p> </li> <li> <p>Check Python version compatibility <pre><code>python --version\n</code></pre></p> </li> <li>Ensure you're using Python 3.6 or higher</li> </ol>"},{"location":"installation/#installing-wordnet-sqlite-database","title":"Installing WordNet SQLite Database","text":"<p>WordNet Porter requires a WordNet SQLite database to migrate. If you don't have one:</p> <ol> <li>Download the WordNet database from WordNet's official website</li> <li>Follow the instructions to convert it to SQLite format (if necessary)</li> <li>Note the path to the SQLite database file</li> </ol>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>Now that you have installed WordNet Porter, you can proceed to the Usage Guide to learn how to use it.</p>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide provides detailed instructions for using WordNet Porter.</p>"},{"location":"usage/#basic-usage","title":"Basic Usage","text":"<p>The simplest way to use WordNet Porter is:</p> <pre><code>wordnet-porter --sqlite-path /path/to/wordnet.db\n</code></pre> <p>This will: 1. Connect to the SQLite database 2. Prompt for PostgreSQL credentials 3. Create a new PostgreSQL database 4. Migrate the schema and data 5. Validate the migration</p>"},{"location":"usage/#configuration","title":"Configuration","text":""},{"location":"usage/#command-line-options","title":"Command-Line Options","text":"<p>WordNet Porter supports the following command-line options:</p> Option Description Default <code>--help</code> Show help message and exit - <code>--force</code> Skip confirmation prompts False <code>--show_db_name</code> Show which PostgreSQL database is being worked on in each step False <code>--show_logging</code> Display logging messages in the terminal False <code>--list_steps</code> Show a list of all available steps and exit - <code>--select_step</code> Manually select which step to start from - <code>--start_step N</code> Start from step number N 1 <code>--end_step M</code> End after step number M Last step <code>--only_step N</code> Run only step number N - <code>--list_data_tables</code> Show list of tables that can be inserted - <code>--insert_data_table X</code> Load data into just the given table -"},{"location":"usage/#configuration-file","title":"Configuration File","text":"<p>WordNet Porter uses a YAML configuration file located at <code>~/.wordnet_porter/config.yaml</code>. You can modify this file to set default values for various settings:</p> <pre><code># WordNet Porter Configuration\n\n# Database Settings\ndatabases:\n  sqlite:\n    path: \"/path/to/wordnet/sqlite/database.db\"\n  postgres:\n    host: \"localhost\"\n    port: 5432\n    database: \"wordnet\"\n    # Credentials will be prompted for or stored securely\n\n# Output Settings\noutput:\n  directory: \"./output\"\n  log_level: \"info\"  # debug, info, warning, error, critical\n  show_console_logs: false\n  show_db_name: false\n\n# Application Settings\napplication:\n  batch_size: 1000\n  force_mode: false\n</code></pre>"},{"location":"usage/#migration-steps","title":"Migration Steps","text":"<p>WordNet Porter performs the migration in several steps:</p> <ol> <li>Test SQLite database connection</li> <li>Set up PostgreSQL credentials</li> <li>Create WordNet database in PostgreSQL</li> <li>Purge directories (if needed)</li> <li>Extract SQLite schema</li> <li>Analyze dependencies</li> <li>Extract SQLite metadata</li> <li>Generate table scripts</li> <li>Generate foreign key scripts</li> <li>Generate foreign key validators</li> <li>Generate index scripts</li> <li>Run table creation scripts</li> <li>Run index creation scripts</li> <li>Insert data into tables</li> <li>Validate foreign key data</li> <li>Apply foreign keys</li> </ol> <p>You can run specific steps using the <code>--only-step</code>, <code>--start-step</code>, and <code>--end-step</code> options.</p>"},{"location":"usage/#examples","title":"Examples","text":""},{"location":"usage/#basic-migration","title":"Basic Migration","text":"<pre><code>wordnet-porter\n</code></pre> <p>This will use the SQLite path from the configuration file or prompt for it if not set.</p>"},{"location":"usage/#specifying-sqlite-path-via-environment-variable","title":"Specifying SQLite Path via Environment Variable","text":"<pre><code>export WORDNET_SQLITE_PATH=/path/to/wordnet.db\nwordnet-porter\n</code></pre>"},{"location":"usage/#running-specific-steps","title":"Running Specific Steps","text":"<pre><code># List all steps\nwordnet-porter --list_steps\n\n# Run only step 5\nwordnet-porter --only_step 5\n\n# Start from step 3\nwordnet-porter --start_step 3\n\n# Run steps 2 through 5\nwordnet-porter --start_step 2 --end_step 5\n</code></pre>"},{"location":"usage/#forcing-operations","title":"Forcing Operations","text":"<pre><code>wordnet-porter --force\n</code></pre> <p>This will skip confirmation prompts, such as when dropping a database.</p>"},{"location":"usage/#showing-database-name","title":"Showing Database Name","text":"<pre><code>wordnet-porter --show_db_name\n</code></pre> <p>This will show which PostgreSQL database is being worked on in each step.</p>"},{"location":"usage/#showing-logging-messages","title":"Showing Logging Messages","text":"<pre><code>wordnet-porter --show_logging\n</code></pre> <p>This will display logging messages in the terminal.</p>"},{"location":"usage/#data-management","title":"Data Management","text":"<pre><code># List all tables\nwordnet-porter --list_data_tables\n\n# Insert data into a specific table\nwordnet-porter --insert_data_table synsets\n</code></pre>"},{"location":"usage/#troubleshooting","title":"Troubleshooting","text":""},{"location":"usage/#common-issues","title":"Common Issues","text":""},{"location":"usage/#sqlite-database-not-found","title":"SQLite Database Not Found","text":"<p>If you see an error like:</p> <pre><code>Error: SQLite database not found: /path/to/wordnet.db\n</code></pre> <p>Make sure the path to your SQLite database is correct and the file exists.</p>"},{"location":"usage/#postgresql-connection-failed","title":"PostgreSQL Connection Failed","text":"<p>If you see an error like:</p> <pre><code>Error: Could not connect to PostgreSQL server\n</code></pre> <p>Make sure your PostgreSQL server is running and the credentials are correct.</p>"},{"location":"usage/#permission-denied","title":"Permission Denied","text":"<p>If you see an error like:</p> <pre><code>Error: Permission denied when creating database\n</code></pre> <p>Make sure the PostgreSQL user has the necessary permissions to create databases.</p>"},{"location":"usage/#getting-help","title":"Getting Help","text":"<p>If you encounter any issues not covered in this guide, please:</p> <ol> <li>Check the GitHub Issues to see if someone else has reported the same problem</li> <li>If not, create a new issue with a detailed description of the problem</li> </ol>"},{"location":"usage/#next-steps","title":"Next Steps","text":"<p>After successfully migrating your WordNet database to PostgreSQL, you can:</p> <ol> <li>Connect to the PostgreSQL database using your favorite client</li> <li>Explore the data using SQL queries</li> <li>Use the database in your applications</li> </ol>"}]}